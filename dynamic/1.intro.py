# 다이나믹 프로그래밍
# 한 번 계산한 문제는 다시 계산하지 않도록 하는 알고리즘
# Dynamic Programming
# 탑다운 vs 보텀업
# 일반적인 알고리즘으로 해결하기 어려운것중 다이나믹 프로그래밍을 쓰는 대표적인 예: 피보나치 수열
# 피보나치는 앞 두항의 합을 현재항으로 두는 특징의 수열이다.

# def fibo(x):
#    if x == 1 or x == 2:
#        return 1
#    return fibo(x - 1) + fibo(x - 2)


# print(fibo(4))
# 위의 코드는 x가 커질수록 수행시간이 기하 급수적으로 늘어나버린다.
# 동일한 함수가 반복적으로 수행되는 것을 막아야한다.

# 이러한 문제는 다이나믹 프로그래밍을 사용하면 효율적으로 해결할수있다.
# 다이나믹 프로그래밍 사용 조건
# 1. 큰 문제를 작은 문제로 나눌 수 있다.
# 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.
# 메모이제이션 : 다이나믹 프로그래밍 구현의 한 방법.
# 한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져 와 사용하는것.
# 캐싱이라고도 불린다.


#d = [0] * 100


# def fibo(x):
#    if x == 1 or x == 2:
#        return 1
#    if d[x] != 0:     # 핵심
#        return d[x]
#    d[x] = fibo(x - 1) + fibo(x - 2)
#    return d[x]


# print(fibo(99))
# 요컨데, 다이나믹 프로그래밍이란 큰 문제르 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법인것이다.

# 탑다운 방식
# 큰 문제를 해결하기 위해 작은 문제를 호출한다. (재귀 함수 이용)
d = [0] * 100


def fibo(x):
    print('f(' + str(x) + ')', end='')
    if x == 1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]


print(fibo(6))

# 보텀업 방식
# 단순히 반복문을 이용하여 소스코드를 작성
# 작은 문제부터 차근차근 답을 도출한다는 의미
d = [0] * 100
d[1] = 1
d[2] = 2
n = 99

for i in range(3, n+1):
    d[i] = d[i - 1] + d[i - 2]
print(d[n])

# 근데 다이나믹 프로그래밍으로 풀어야할지 말지를 알아 채는것이 능력이다.
# 특정한 문제를 완전 탐색 알고리즘으로 접근했을 때 시간이 매우 오래걸리면 다이나믹 프로그래밍을 적용할수 있는지 확인해보자
# 이 때 해결하고자 하는 부분 문제들이 피보나치의 경우처럼 중복되는 과정이라면 사용할 수 있을것이다.
# 보텀업을 권장한다고 한다.
