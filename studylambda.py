# 평소 파이썬에서 람다 표현식을 어색해해서 간과해두고 있었지만, 이참에 제대로 정리를 해야겠다
# 여태까지는 def으로 함수를 정의해서 사용했다.
# lambda를 이용하면 익명 함수를 만들 수 있다.
# 식 형태로 되어 있기에 람다 표현식으로 불린다.

# 왜 쓰이는가?
# 람다 표현식은 함수를 간편하게 작성할 수 있기떄문에, 다른 함수의 인수로 넣을떄 주로 사용한다.

# 람다 표현식 안에서는 새 변수를 만들 수 없다.
# 변수가 여러개 필요할 경우 def로 함수를 만들어 사용해야한다.
# 하지만 바깥에 있는 변수는 사용 가능하다.
# y = 10
# (lambda x : x + y)(1)

# 람다 표현식을 사용하는 이유는 함수의 인수부분에서 간단하게 함수를 만들기 위함이라고 했다.
# 그 대표적인 예가 map이다.
# last(map(lambda x : x + 10,[1, 2, 3]))

# 람다 표현식에는 조건부 표현식을 사용가능하며, 이때 if를 썻으면 else는 무조건 써야한다.

# a = [1,2,3,4,5,6,7]
# list(map(lambda x: str(x) if x % 3 == 0 else x, a))
# 이때 람다표현식에선 : 를 쓰지 않는다. elif는 쓸 수 없다.

# a = [1,2,3,4,5,6,7]
# list(map(lambda x: str(x) if x == 1 else float(x) if x == 2 else x + 10, a))
# 이렇게 복잡하면 한줄이라고 좋아할 문제가 아니다. 알아보기가 힘들다.
# 굳이 억지로 람다 표현식을 사용하지 않아도 된다.
# 코드는 알아보기 쉬운 것이 좋다.

# map에 객체를 여러개 넣을 수가 있다.
# a = [1,2,3,4,5]
# b = [2,4,6,8,10]
# list(map(lambda x, y: x + y, a,b))

# filter 을 사용해보자
# filter 은 반복 가능한 객체에서 특정 조건에 맞는 요소만 가져온다.
# filter에 지정한 함수 반환값이 True 일 경우 해당 요소를 가져온다.

# def f(x):
#   return x > 5 and x < 10

# a = [8, 3, 2, 10, 15, 7, 1, 9, 0, 11]
# list(filter(f, a))
# [8, 7, 9]

# list(filter(lambda x : x > 5 and x < 10, a ))

# 정리해보자면 익명 함수가 필요할 때, (함수 안에서라던지.) 그때 사용하면 될 것 같다.
# lambda 변수: 변수를 이용한 식 이나 조건, 외부 리스트나 직접적 리스트를 통한 범위)


class Person:
    def greeting(self):
        print('Hello')

    def hello(self):
        self.greeting()


j = Person()
print(j.hello())
